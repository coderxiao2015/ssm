<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd ">
  <!-- 指定Spring需要扫描的包，便于识别被注解的受托管bean -->
  <context:component-scan base-package="com.xiao" scoped-proxy="interfaces"/>
  <!-- 配置文件加载 -->
  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:db.properties</value>
      </list>
    </property>
  </bean>

  <!--c3p0 数据源-->
<bean id="ds" class="com.mchange.v2.c3p0.ComboPooledDataSource">
  <property name="driverClass" value="${driverClassName}" />
  <property name="jdbcUrl" value="${jdbcUrl}" />
  <property name="user" value="${user}" />
  <property name="password" value="${password}" />
  <property name="initialPoolSize" value="10"/>
  <property name="maxStatements" value="0"/>
  <property name="minPoolSize" value="5" />
  <property name="maxPoolSize" value="200"/>
  <property name="maxIdleTime" value="600"/>
  <property name="unreturnedConnectionTimeout" value="300"/>
  <!--设置连接超时时间：设置连接被checkout后，
      经过多长时间还未返还连接池，则连接缓冲池直接Kill该连接，
      此时，结合 debugUnretrunedConnectionStackTraces，
      我们可以知道是什么程序持有了连接，并且没有返回。这个方法很暴力，有可能 造成应用程序不稳定，
      所以，如果真的出现了连接泄漏，一时半会又找不到问题点所在，可以暂时使用这个方法让应用程序跑起来。-->
  <property name="debugUnreturnedConnectionStackTraces" value="true"/>
  <!--默认为false，如果此参数设置为true，当所有连接用完的时候，
    会以堆栈信息显示哪些代码使用了连接。
    由于跟踪连接状态会产生额外的消耗，
    如果程序稳定，应该将此参数恢复为默认值false。-->
  <property name="automaticTestTable" value="c3p0_test"/>
  <property name="idleConnectionTestPeriod" value="60"/>
</bean>
  <!--事务管理器-->
  <bean id="manager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="ds"></property>
  </bean>

  <!--配置通知-->
  <tx:advice id="tscAdvice" transaction-manager="manager">
    <tx:attributes>
      <!--传播方式为嵌套-->
      <tx:method name="add*" propagation="NESTED" />
      <tx:method name="del*" propagation="NESTED" />
      <tx:method name="upd*" propagation="NESTED" />
      <tx:method name="do*" propagation="NESTED" />
      <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
    </tx:attributes>
  </tx:advice>

  <!--配置切面-->
  <aop:config>
    <!--切点-->
    <aop:pointcut id="myCut" expression="execution(* com.xiao.service.*.impl..*.*(..))" />
    <!--切点和通知编织在一起-->
    <aop:advisor advice-ref="tscAdvice" pointcut-ref="myCut" />
  </aop:config>

  <!--spring 实例化一个sqlSessionFactory-->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 加载mybatis的配置文件 -->
    <property name="configLocation" value="classpath:myBatisCfg.xml " />
    <!-- 配置数据源 -->
    <property name="dataSource" ref="ds"></property>
  </bean>

  <!-- mybaties 连接数据库工具类 -->
<!--  <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
    <property name="configLocation" value="classpath:myBatisCfg.xml"></property>
    <property name="dataSource" ref="ds"></property>
  </bean>-->

</beans>